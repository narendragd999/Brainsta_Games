// lightweight script to render tiles and use audio; full logic same as prior versions
const gridEl = document.getElementById('grid'); const promptEl = document.getElementById('prompt'); const scoreEl = document.getElementById('score'); const levelEl = document.getElementById('level'); const messageEl = document.getElementById('message'); const nextBtn = document.getElementById('nextBtn'); const restartBtn = document.getElementById('restartBtn'); const bgm = document.getElementById('bgm'); const sfxCorrect = document.getElementById('sfxCorrect'); const sfxWrong = document.getElementById('sfxWrong'); const sfxLevel = document.getElementById('sfxLevel'); const bgmToggle = document.getElementById('bgmToggle');
let level=1, score=0, currentAnswer=null; const SHAPES=['circle','square','triangle','hexagon'];
function pick(arr){return arr[Math.floor(Math.random()*arr.length)];}
function renderGrid(size, tiles){ gridEl.className='grid tile-'+size; gridEl.innerHTML=''; tiles.forEach((t,i)=>{ const btn=document.createElement('button'); btn.className='tile'; btn.setAttribute('data-i',i); let svg=''; if(t.shape==='circle') svg='<img src="icon_circle.svg">'; if(t.shape==='square') svg='<img src="icon_square.svg">'; if(t.shape==='triangle') svg='<img src="icon_triangle.svg">'; if(t.shape==='hexagon') svg='<img src="icon_hexagon.svg">'; btn.innerHTML=`<div style="transform:rotate(${t.rotation||0}deg)">${svg}</div>`; btn.addEventListener('click',()=>onTileClick(i,btn)); gridEl.appendChild(btn); }); }
function makePuzzle(lvl){ const variants=Math.min(4,2+Math.floor(lvl/3)); const gridSize=variants===2?4:variants===3?9:16; const size=variants===2?2:variants===3?3:4; const baseShape=pick(SHAPES); const rotate = lvl>=4 ? [0,90,180,270][Math.floor(Math.random()*4)]:0; const tiles = Array.from({length:gridSize},()=>({shape:baseShape,rotation:rotate})); const oddType=Math.floor(Math.random()*3); const oddIndex=Math.floor(Math.random()*gridSize); if(oddType===0){ tiles[oddIndex].shape=pick(SHAPES.filter(s=>s!==baseShape)); promptEl.textContent='Find the tile with different SHAPE'; } else if(oddType===1){ tiles[oddIndex].shape=pick(SHAPES.filter(s=>s!==baseShape)); promptEl.textContent='Find the tile with different COLOR'; } else { tiles[oddIndex].rotation=(rotate + (lvl%2===0?90:180))%360; promptEl.textContent='Find the tile that is ROTATED'; } return {tiles, oddIndex, size}; }
function onTileClick(index, btn){ const tiles = Array.from(document.querySelectorAll('.tile')); tiles.forEach(t=>t.disabled=true); if(index===currentAnswer){ btn.classList.add('correct'); score+=10; scoreEl.textContent='Score: '+score; sfxCorrect.currentTime=0; sfxCorrect.play().catch(()=>{}); nextBtn.disabled=false; } else { btn.classList.add('wrong'); score=Math.max(0,score-5); scoreEl.textContent='Score: '+score; sfxWrong.currentTime=0; sfxWrong.play().catch(()=>{}); const correctBtn=document.querySelector('.tile[data-i="'+currentAnswer+'"]'); if(correctBtn) correctBtn.classList.add('correct'); nextBtn.disabled=false; } }
function nextPuzzle(){ messageEl.textContent=''; nextBtn.disabled=true; const {tiles,oddIndex,size}=makePuzzle(level); currentAnswer=oddIndex; renderGrid(size,tiles); }
nextBtn.addEventListener('click',nextPuzzle); restartBtn.addEventListener('click',()=>{ level=1;score=0;levelEl.textContent='Level '+level;scoreEl.textContent='Score: '+score;messageEl.textContent='Restarted'; nextBtn.disabled=false; nextPuzzle(); });
bgmToggle.addEventListener('change',()=>{ if(bgmToggle.checked){ bgm.volume=0.6; bgm.play().catch(()=>{});} else { bgm.pause(); bgm.currentTime=0; } }); bgm.volume=0.6; setTimeout(()=>{ if(bgmToggle.checked){ bgm.play().catch(()=>{}); } },350); nextBtn.disabled=false; nextPuzzle();